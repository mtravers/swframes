Todos:

Key:
+++ things that should really be fixed for a release
++ good ideas
CCC Clos conversion related
PPP performance related

Conceptual cleanups:
- coerce-slot needs to firmed up, worked for inverses
- how do add-triple etc related to the slot-level functions, sources, etc
- dereferencing
- fill-frame
- default-sparql-endpoint vs default-frame-source
- sources, especially code-source
- methodize more and be more regular about passing source
- classify, when does it happen


Random cleanups:
- get consistent with defmethod$ over rdfs-defmethod, etc.
- remove most references to collabrx and crx:

Ideas.

In-memory and SPARQL endpoints should have a common (or partially common) API.  

In-memory frames can have slot indexes for quicker lookup. But we probably don't
want to make a whole in-memory SPARQL implementation (or maybe we do, it's not
that hard).

Theory of dirtiness (Not yet implemented):
- frames have a slot of dirty predicates.
- there is a global (or per-sparql) list of dirty frames

Theory of blank nodes (and also, perhaps, fresh frames)
- they don't need a unique URI
- fresh frames don't need to have a unique URI until they are written out somewhere

Theory of slot values
- always a list
- should deprecate set-slotv, add-triple is the appropriate API
- should keep inverses
- msv is a more abstracted form of slotv that works on lists

- should use rdfs typing
- should make clos classes to rdfs
- should have option for domain/range checking based on rdf

- need theory of serialized lisp objects.  SPARQL basically always returns strings or URIs; some strings should
  be READ.

Slot properties:
- display
- special save/restore behavior (ie, we might want some slots that can't be serialized or need special handling to do so)
  - dependent
- ordered/nonordered

